//imports the SPI library (needed to communicate with Gamebuino's screen)
#include <SPI.h>
//imports the Gamebuino library
#include <Gamebuino.h>



//v1.0
// sprites

const byte logo[] PROGMEM = {};
const byte Porte[] PROGMEM = {};
const byte note[] PROGMEM = {8, 9, B00010000, B00010000, B00010000, B00010000, B00010000, B00010000, B11110000, B11110000, B11110000,};
const byte ClefFA[] PROGMEM = {16, 12, B01111100, B00000000, B11001110, B00000000, B11101110, B01000000, B11100111, B00000000, B01100111, B00000000, B00000111, B01000000, B00000111, B00000000, B00000111, B00000000, B00001110, B00000000, B00011100, B00000000, B00110000, B00000000, B01000000, B00000000,};
const byte ClefSOL[] PROGMEM = {16, 20, B00011100, B00000000, B00101100, B00000000, B00100110, B00000000, B00100110, B00000000, B00101100, B00000000, B00011100, B00000000, B00011000, B00000000, B00111000, B00000000, B01110110, B00000000, B01101111, B00000000, B11011001, B10000000, B11010001, B10000000, B11001001, B10000000, B01100011, B00000000, B00111110, B00000000, B00011100, B00000000, B11101000, B00000000, B11101000, B00000000, B11011000, B00000000, B01110000, B00000000,};
const byte PorteUP[] PROGMEM = {88, 48, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00111111, B11111111, B00000111, B11111111, B11000001, B11111111, B11110000, B01111111, B11111100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00111111, B11111111, B00000111, B11111111, B11000001, B11111111, B11110000, B01111111, B11111100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,};
const byte PorteDOWN[] PROGMEM = {};
int CountPosNOTE = 1;
int MaxNOTE = 16;
int NOTE1 = 7; // nombre du tableau de sprites
int NOTE2 = 7; // nombre du tableau de sprites
int NOTE3 = 7; // nombre du tableau de sprites
int NOTE4 = 7; // nombre du tableau de sprites
int NOTE5 = 7; // nombre du tableau de sprites
int DrawRect = 0; // rectangle hidding notes names
int Clef = 0; // clef de sol ou fa
int NotePosition = 0;

char DO[4] = "DO";
char RE[4] = "RE";
char MI[4] = "MI";
char FA[4] = "FA";
char SOL[4] = "SOL";
char LA[4] = "LA";
char SI[4] = "SI";


int LangNote = 0; // choose ENG or FR notes



Gamebuino gb;
extern const byte font3x5[]; //a large, comfy font


void setup() {
  gb.begin();
  gb.titleScreen(F(""), logo);
  gb.display.setFont(font3x5);
  gb.battery.show = false;
}

void loop() {
  if (gb.update()) {

     //exit game
    if (gb.buttons.pressed(BTN_C)) {
      setup();
    }



    // NOTE print

    gb.display.drawBitmap(0, 0, Porte);



    // controls

    // GAUCHE DROITE
    if (gb.buttons.released(BTN_LEFT)) {
      CountPosNOTE--;
      if (CountPosNOTE < 1) {
        CountPosNOTE = 1;
      }
    }

    if (gb.buttons.released(BTN_RIGHT)) {
      CountPosNOTE++;
      if (CountPosNOTE > 4) {
        CountPosNOTE = 4;
      }
    }

    // Positionnement du curseur de choix

    switch (CountPosNOTE)
    {
      case 1:
        gb.display.drawRect(9, 33+2, 10,3); // UP RECTANGLE 1
        gb.display.drawRect(9, 33+10+2, 10,3); // DOWN TRIANGLE 1
        if (gb.buttons.released(BTN_UP)) {
          gb.display.fillRect(9, 33+2, 10,3);
          NOTE1++;
        }
        if (gb.buttons.released(BTN_DOWN)) {
          gb.display.fillRect(9, 33+10+2, 10,3);
          NOTE1--;
        }
        break;
      case 2:
        gb.display.drawRect(9+18, 33+2, 10,3); // UP RECTANGLE 1
        gb.display.drawRect(9+18, 33+10+2, 10,3); // DOWN TRIANGLE 1
        if (gb.buttons.released(BTN_UP)) {
          gb.display.fillRect(9+18, 33+2, 10,3);
          NOTE2++;
        }
        if (gb.buttons.released(BTN_DOWN)) {
         gb.display.fillRect(9+18, 33+10+2, 10,3);
          NOTE2--;
        }
        break;
      case 3:
        gb.display.drawRect(9+18+18, 33+2, 10,3); // UP RECTANGLE 1
        gb.display.drawRect(9+18+18, 33+10+2, 10,3); // DOWN TRIANGLE 1
        if (gb.buttons.released(BTN_UP)) {
          gb.display.fillRect(9+18+18, 33+2, 10,3);
          NOTE3++;
        }
        if (gb.buttons.released(BTN_DOWN)) {
          gb.display.fillRect(9+18+18, 33+10+2, 10,3);
          NOTE3--;
        }
        break;
      case 4:
        gb.display.drawRect(9+18+18+18, 33+2, 10,3); // UP RECTANGLE 1
        gb.display.drawRect(9+18+18+18, 33+10+2, 10,3); // DOWN TRIANGLE 1
        if (gb.buttons.released(BTN_UP)) {
          gb.display.fillRect(9+18+18+18, 33+2, 10,3);
          NOTE4++;
        }
        if (gb.buttons.released(BTN_DOWN)) {
          gb.display.fillRect(9+18+18+18, 33+10+2, 10,3);
          NOTE4--;
        }
        break;

    }


    gb.display.cursorX = 10;
    gb.display.cursorY = 37+2;
    switch (NOTE1 + 1) {
      case 1: gb.display.println(DO);
        gb.display.drawBitmap(0, 0, PorteDOWN);
        gb.display.fillRect(14, 28 + NotePosition, 4, 4); // la note 1
        break;
      case 2: gb.display.println(RE);
        gb.display.drawBitmap(0, 0, PorteDOWN);
        gb.display.fillRect(14, 28 - 2 + NotePosition, 4, 4); // la note 1
        break;
      case 3: gb.display.println(MI);
        gb.display.fillRect(14, 28 - 4 + NotePosition, 4, 4); // la note 1
        break;
      case 4: gb.display.println(FA);
        gb.display.fillRect(14, 28 - 6 + NotePosition, 4, 4); // la note
        break;
      case 5: gb.display.println(SOL);
        gb.display.fillRect(14, 28 - 8 + NotePosition, 4, 4); // la note
        break;
      case 6: gb.display.println(LA);
        gb.display.fillRect(14, 28 - 10 + NotePosition, 4, 4); // la note
        break;
      case 7: gb.display.println(SI);
        gb.display.fillRect(14, 28 - 12 + NotePosition, 4, 4); // la note
        break;
      case 8: gb.display.println(DO);
        gb.display.fillRect(14, 28 - 14 + NotePosition, 4, 4); // la note
        break;
      case 9: gb.display.println(RE);
        gb.display.fillRect(14, 28 - 16 + NotePosition, 4, 4); // la note 1
        break;
      case 10: gb.display.println(MI);
        gb.display.fillRect(14, 28 - 18 + NotePosition, 4, 4); // la note 1
        break;
      case 11: gb.display.println(FA);
        gb.display.fillRect(14, 28 - 20 + NotePosition, 4, 4); // la note 1
        break;
      case 12: gb.display.println(SOL);
        gb.display.drawBitmap(0, 0, PorteUP);
        gb.display.fillRect(14, 28 - 22 + NotePosition, 4, 4); // la note
        break;
      case 13: gb.display.println(LA);
        gb.display.drawBitmap(0, 0, PorteUP);
        gb.display.fillRect(14, 28 - 24 + NotePosition, 4, 4); // la note
        break;
      case 14: gb.display.println(SI);
        gb.display.drawBitmap(0, 0, PorteUP);
        gb.display.fillRect(14, 28 - 26 + NotePosition, 4, 4); // la note
        break;
      case 15: gb.display.println(DO);
        gb.display.drawBitmap(0, 0, PorteUP);
        gb.display.fillRect(14, 28 - 28 + NotePosition, 4, 4); // la note
        break;
      case 16: gb.display.println(RE);
        gb.display.drawBitmap(0, 0, PorteUP);
        gb.display.fillRect(14, 28 - 30 + NotePosition, 4, 4); // la note
        break;
    }


    gb.display.cursorX = 28;
    gb.display.cursorY = 37+2;
    switch (NOTE2 + 1) {
      case 1: gb.display.println(DO);
        gb.display.drawBitmap(0, 0, PorteDOWN);
        gb.display.fillRect(14 + 18, 28 + NotePosition, 4, 4); // la note 1
        break;
      case 2: gb.display.println(RE);
        gb.display.drawBitmap(0, 0, PorteDOWN);
        gb.display.fillRect(14 + 18, 28 - 2 + NotePosition, 4, 4); // la note 1
        break;
      case 3: gb.display.println(MI);
        gb.display.fillRect(14 + 18, 28 - 4 + NotePosition, 4, 4); // la note 1
        break;
      case 4: gb.display.println(FA);
        gb.display.fillRect(14 + 18, 28 - 6 + NotePosition, 4, 4); // la note
        break;
      case 5: gb.display.println(SOL);
        gb.display.fillRect(14 + 18, 28 - 8 + NotePosition, 4, 4); // la note
        break;
      case 6: gb.display.println(LA);
        gb.display.fillRect(14 + 18, 28 - 10 + NotePosition, 4, 4); // la note
        break;
      case 7: gb.display.println(SI);
        gb.display.fillRect(14 + 18, 28 - 12 + NotePosition, 4, 4); // la note
        break;
      case 8: gb.display.println(DO);
        gb.display.fillRect(14 + 18, 28 - 14 + NotePosition, 4, 4); // la note
        break;
      case 9: gb.display.println(RE);
        gb.display.fillRect(14 + 18, 28 - 16 + NotePosition, 4, 4); // la note 1
        break;
      case 10: gb.display.println(MI);
        gb.display.fillRect(14 + 18, 28 - 18 + NotePosition, 4, 4); // la note 1
        break;
      case 11: gb.display.println(FA);
        gb.display.fillRect(14 + 18, 28 - 20 + NotePosition, 4, 4); // la note 1
        break;
      case 12: gb.display.println(SOL);
        gb.display.drawBitmap(0, 0, PorteUP);
        gb.display.fillRect(14 + 18, 28 - 22 + NotePosition, 4, 4); // la note
        break;
      case 13: gb.display.println(LA);
        gb.display.drawBitmap(0, 0, PorteUP);
        gb.display.fillRect(14 + 18, 28 - 24 + NotePosition, 4, 4); // la note
        break;
      case 14: gb.display.println(SI);
        gb.display.drawBitmap(0, 0, PorteUP);
        gb.display.fillRect(14 + 18, 28 - 26 + NotePosition, 4, 4); // la note
        break;
      case 15: gb.display.println(DO);
        gb.display.drawBitmap(0, 0, PorteUP);
        gb.display.fillRect(14 + 18, 28 - 28 + NotePosition, 4, 4); // la note
        break;
      case 16: gb.display.println(RE);
        gb.display.drawBitmap(0, 0, PorteUP);
        gb.display.fillRect(14 + 18, 28 - 30 + NotePosition, 4, 4); // la note
        break;
    }


    gb.display.cursorX = 46;
    gb.display.cursorY = 37+2;
    switch (NOTE3 + 1) {
      case 1: gb.display.println(DO);
        gb.display.drawBitmap(0, 0, PorteDOWN);
        gb.display.fillRect(14 + 18 + 18, 28 + NotePosition, 4, 4); // la note 1
        break;
      case 2: gb.display.println(RE);
        gb.display.drawBitmap(0, 0, PorteDOWN);
        gb.display.fillRect(14 + 18 + 18, 28 - 2 + NotePosition, 4, 4); // la note 1
        break;
      case 3: gb.display.println(MI);
        gb.display.fillRect(14 + 18 + 18, 28 - 4 + NotePosition, 4, 4); // la note 1
        break;
      case 4: gb.display.println(FA);
        gb.display.fillRect(14 + 18 + 18, 28 - 6 + NotePosition, 4, 4); // la note
        break;
      case 5: gb.display.println(SOL);
        gb.display.fillRect(14 + 18 + 18, 28 - 8 + NotePosition, 4, 4); // la note
        break;
      case 6: gb.display.println(LA);
        gb.display.fillRect(14 + 18 + 18, 28 - 10 + NotePosition, 4, 4); // la note
        break;
      case 7: gb.display.println(SI);
        gb.display.fillRect(14 + 18 + 18, 28 - 12 + NotePosition, 4, 4); // la note
        break;
      case 8: gb.display.println(DO);
        gb.display.fillRect(14 + 18 + 18, 28 - 14 + NotePosition, 4, 4); // la note
        break;
      case 9: gb.display.println(RE);
        gb.display.fillRect(14 + 18 + 18, 28 - 16 + NotePosition, 4, 4); // la note 1
        break;
      case 10: gb.display.println(MI);
        gb.display.fillRect(14 + 18 + 18, 28 - 18 + NotePosition, 4, 4); // la note 1
        break;
      case 11: gb.display.println(FA);
        gb.display.fillRect(14 + 18 + 18, 28 - 20 + NotePosition, 4, 4); // la note 1
        break;
      case 12: gb.display.println(SOL);
        gb.display.drawBitmap(0, 0, PorteUP);
        gb.display.fillRect(14 + 18 + 18, 28 - 22 + NotePosition, 4, 4); // la note
        break;
      case 13: gb.display.println(LA);
        gb.display.drawBitmap(0, 0, PorteUP);
        gb.display.fillRect(14 + 18 + 18, 28 - 24 + NotePosition, 4, 4); // la note
        break;
      case 14: gb.display.println(SI);
        gb.display.drawBitmap(0, 0, PorteUP);
        gb.display.fillRect(14 + 18 + 18, 28 - 26 + NotePosition, 4, 4); // la note
        break;
      case 15: gb.display.println(DO);
        gb.display.drawBitmap(0, 0, PorteUP);
        gb.display.fillRect(14 + 18 + 18, 28 - 28 + NotePosition, 4, 4); // la note
        break;
      case 16: gb.display.println(RE);
        gb.display.drawBitmap(0, 0, PorteUP);
        gb.display.fillRect(14 + 18 + 18, 28 - 30 + NotePosition, 4, 4); // la note
        break;
    }


    gb.display.cursorX = 64;
    gb.display.cursorY = 37+2;
    switch (NOTE4 + 1) {
      case 1: gb.display.println(DO);
        gb.display.drawBitmap(0, 0, PorteDOWN);
        gb.display.fillRect(14 + 18 + 18 + 18, 28 + NotePosition, 4, 4); // la note 1
        break;
      case 2: gb.display.println(RE);
        gb.display.drawBitmap(0, 0, PorteDOWN);
        gb.display.fillRect(14 + 18 + 18 + 18, 28 - 2 + NotePosition, 4, 4); // la note 1
        break;
      case 3: gb.display.println(MI);
        gb.display.fillRect(14 + 18 + 18 + 18, 28 - 4 + NotePosition, 4, 4); // la note 1
        break;
      case 4: gb.display.println(FA);
        gb.display.fillRect(14 + 18 + 18 + 18, 28 - 6 + NotePosition, 4, 4); // la note
        break;
      case 5: gb.display.println(SOL);
        gb.display.fillRect(14 + 18 + 18 + 18, 28 - 8 + NotePosition, 4, 4); // la note
        break;
      case 6: gb.display.println(LA);
        gb.display.fillRect(14 + 18 + 18 + 18, 28 - 10 + NotePosition, 4, 4); // la note
        break;
      case 7: gb.display.println(SI);
        gb.display.fillRect(14 + 18 + 18 + 18, 28 - 12 + NotePosition, 4, 4); // la note
        break;
      case 8: gb.display.println(DO);
        gb.display.fillRect(14 + 18 + 18 + 18, 28 - 14 + NotePosition, 4, 4); // la note
        break;
      case 9: gb.display.println(RE);
        gb.display.fillRect(14 + 18 + 18 + 18, 28 - 16 + NotePosition, 4, 4); // la note 1
        break;
      case 10: gb.display.println(MI);
        gb.display.fillRect(14 + 18 + 18 + 18, 28 - 18 + NotePosition, 4, 4); // la note 1
        break;
      case 11: gb.display.println(FA);
        gb.display.fillRect(14 + 18 + 18 + 18, 28 - 20 + NotePosition, 4, 4); // la note 1
        break;
      case 12: gb.display.println(SOL);
        gb.display.drawBitmap(0, 0, PorteUP);
        gb.display.fillRect(14 + 18 + 18 + 18, 28 - 22 + NotePosition, 4, 4); // la note
        break;
      case 13: gb.display.println(LA);
        gb.display.drawBitmap(0, 0, PorteUP);
        gb.display.fillRect(14 + 18 + 18 + 18, 28 - 24 + NotePosition, 4, 4); // la note
        break;
      case 14: gb.display.println(SI);
        gb.display.drawBitmap(0, 0, PorteUP);
        gb.display.fillRect(14 + 18 + 18 + 18, 28 - 26 + NotePosition, 4, 4); // la note
        break;
      case 15: gb.display.println(DO);
        gb.display.drawBitmap(0, 0, PorteUP);
        gb.display.fillRect(14 + 18 + 18 + 18, 28 - 28 + NotePosition, 4, 4); // la note
        break;
      case 16: gb.display.println(RE);
        gb.display.drawBitmap(0, 0, PorteUP);
        gb.display.fillRect(14 + 18 + 18 + 18, 28 - 30 + NotePosition, 4, 4); // la note
        break;
    }



    if (NOTE1 > MaxNOTE) {
      NOTE1 = 0;
    }
    if (NOTE2 > MaxNOTE) {
      NOTE2 = 0;
    }
    if (NOTE3 > MaxNOTE) {
      NOTE3 = 0;
    }
    if (NOTE4 > MaxNOTE) {
      NOTE4 = 0;
    }

    if (NOTE1 < 0) {
      NOTE1 = MaxNOTE;
    }
    if (NOTE2 < 0) {
      NOTE2 = MaxNOTE;
    }
    if (NOTE3 < 0) {
      NOTE3 = MaxNOTE;
    }
    if (NOTE4 < 0) {
      NOTE4 = MaxNOTE;
    }

    //-----------------rectangle noir qui cache les notes
    if (DrawRect == 1) {
      gb.display.fillRect(0, 38, 88, 7);
    }

    if (gb.buttons.released(BTN_B)) {
      DrawRect = DrawRect + 1;
      if (DrawRect > 1) {
        DrawRect = 0;
      }
    }

    //-----------------changement de clef
    if (Clef == 1) {
      gb.display.drawBitmap(0, 9, ClefSOL);
      NotePosition = 0;
    }

    if (Clef == 0) {
      gb.display.drawBitmap(0, 9, ClefFA);
      NotePosition = 4;
    }

    if (gb.buttons.released(BTN_A)) {
      Clef++;
      if (Clef > 1) {
        Clef = 0;
      }
    }

    //---------------RANDOMIZE NOTE


    if (gb.buttons.released(BTN_B) && gb.buttons.released(BTN_A)) {

      NOTE1 = random(0, MaxNOTE);
      NOTE2 = random(0, MaxNOTE);
      NOTE3 = random(0, MaxNOTE);
      NOTE4 = random(0, MaxNOTE);
      DrawRect = 1; // hide notes names when randomized
      Clef = 1; // stay in clef de sol
    }

    //-----------Choose language of notes EN or FR notation

    if (LangNote == 0) {
       strcpy(DO,"DO");
       strcpy(RE,"RE");
       strcpy(MI,"MI");
       strcpy(FA,"FA");
       strcpy(SOL,"SOL");
       strcpy(LA,"LA");
       strcpy(SI,"SI");
    }

    if (LangNote == 1) {
       strcpy(DO,"C");
       strcpy(RE,"D");
       strcpy(MI,"E");
       strcpy(FA,"F");
       strcpy(SOL,"G");
       strcpy(LA,"A");
       strcpy(SI,"B");
    }

    if (gb.buttons.held(BTN_LEFT,20)) {
      LangNote++;
      if (LangNote > 1) {
        LangNote = 0;
      }
    }
  
    //----------------------------------------------
  }
}

